apply plugin: 'com.android.library'
apply plugin: 'com.google.protobuf'

ext {
    //supportLibraryVersion = '25.4.0'
    grpcVersion = '1.4.0'
}
android {


    packagingOptions {
        exclude 'META-INF/INDEX.LIST'
    }
    compileSdkVersion 26
    buildToolsVersion '28.0.3'

    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 26
        versionCode 1
        versionName "1.9.6"
        vectorDrawables.useSupportLibrary = true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    configurations.all {
        resolutionStrategy.force 'com.google.code.findbugs:jsr305:3.0.2'
    }

}
protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.3.0'
    }
    plugins {
        javalite {
            artifact = "com.google.protobuf:protoc-gen-javalite:3.0.0"
        }
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
        }
    }
    generateProtoTasks {
        all().each { task ->
            task.plugins {
                javalite {}
                grpc {
                    // Options added to --grpc_out
                    option 'lite'
                }
            }
        }
    }

}
dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    androidTestImplementation('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    api project(':kommunicate')
    api 'com.google.firebase:firebase-messaging:18.0.0'
    api 'com.google.android.gms:play-services-maps:16.1.0'
    api 'com.google.android.gms:play-services-location:16.0.0'
    api 'de.hdodenhof:circleimageview:2.2.0'
    api 'com.google.android.material:material:1.0.0'
    api 'com.theartofdev.edmodo:android-image-cropper:2.7.0'
    api 'com.github.bumptech.glide:glide:4.9.0'
    api 'androidx.cardview:cardview:1.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    //Google
    implementation 'com.android.support:appcompat-v7:26.+'



    //gRPC
    implementation "io.grpc:grpc-okhttp:$grpcVersion"
    implementation "io.grpc:grpc-protobuf-lite:$grpcVersion"
    implementation "io.grpc:grpc-stub:$grpcVersion"
    implementation 'javax.annotation:javax.annotation-api:1.2'
    //implementation "com.google.cloud:google-cloud-speech:0.61.0-beta"
    protobuf 'com.google.protobuf:protobuf-java:3.3.1'

    implementation ('com.google.auth:google-auth-library-oauth2-http:0.7.0') {
        exclude module: 'httpclient'
    }
    implementation 'org.jetbrains:annotations-java5:15.0'
    //Note: use this in case customization is not required
}
/*ext {
    // Where you will see your artifact in Bintray's web interface
    // The "bintrayName" should match the name of the Bintray repro.
    bintrayRepo = 'Kommunicate-Android-Chat-SDK'
    bintrayName = 'kommunicate-android-chat-sdk-ui'
    bintrayOrg = 'kommunicate'

    // Maven metadata
    publishedGroupId = 'io.kommunicate.sdk'
    libraryName = 'kommunicateui'
    // Save yourself a head ache, and set this equal to the name of the Android Studio library
    // module. The artifact name needs to match the name of the library.
    artifact = 'kommunicateui'

    libraryDescription = 'Kommunicate android chat SDK for cutomer support'
    libraryVersion = '1.9.6'
    developerId = 'kommunicate'
    developerName = 'Kommunicate'
    developerEmail = 'devashish.mamgain@gmail.com'
}

apply from: 'https://raw.githubusercontent.com/attwellBrian/JCenter/master/installv1.gradle'
apply plugin: 'com.jfrog.bintray'
version = libraryVersion
task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}
task javadoc(type: Javadoc) {
    failOnError false // add this line
    source = android.sourceSets.main.java.srcDirs
    //source = android.sourceSets.main.allJava
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}
artifacts {
    archives javadocJar
    archives sourcesJar
}
// Bintray
Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())
bintray {
    user = properties.getProperty("bintray.user")
    key = properties.getProperty("bintray.apikey")
    configurations = ['archives']
    pkg {
        repo = bintrayRepo
        name = bintrayName
        userOrg = bintrayOrg
        desc = libraryDescription
        publish = true
        publicDownloadNumbers = true
        version {
            desc = libraryDescription
            // Optional. The passphrase for GPG signing'
            // gpg {
            //    sign = true //Determines whether to GPG sign the files. The default is false
            //    passphrase = properties.getProperty("bintray.gpg.password")
            //}
        }
    }
}*/


